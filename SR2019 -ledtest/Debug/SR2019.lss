
SR2019.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002d0  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800062  00800062  00000366  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad0  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dc  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000547  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000515  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000520  00000000  00000000  000021b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000026d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	e3 c0       	rjmp	.+454    	; 0x1d6 <__vector_7>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 ed       	ldi	r30, 0xD0	; 208
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ae 36       	cpi	r26, 0x6E	; 110
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	e4 d0       	rcall	.+456    	; 0x21e <main>
  56:	3a c1       	rjmp	.+628    	; 0x2cc <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <_Z11serialBeginl>:
#include "Core.h"

static char numberStringBuffer[20];

void serialBegin(long baud)
{
  5a:	9b 01       	movw	r18, r22
  5c:	ac 01       	movw	r20, r24
	uint16_t baud_setting;

	UCSRA = 0;
  5e:	1b b8       	out	0x0b, r1	; 11
	baud_setting = (F_CPU / 8 / baud - 1) / 2;
  60:	60 ea       	ldi	r22, 0xA0	; 160
  62:	75 e2       	ldi	r23, 0x25	; 37
  64:	86 e2       	ldi	r24, 0x26	; 38
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	f3 d0       	rcall	.+486    	; 0x250 <__divmodsi4>
  6a:	ba 01       	movw	r22, r20
  6c:	a9 01       	movw	r20, r18
  6e:	41 50       	subi	r20, 0x01	; 1
  70:	51 09       	sbc	r21, r1
  72:	61 09       	sbc	r22, r1
  74:	71 09       	sbc	r23, r1
  76:	db 01       	movw	r26, r22
  78:	ca 01       	movw	r24, r20
  7a:	1a f4       	brpl	.+6      	; 0x82 <_Z11serialBeginl+0x28>
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	a1 1d       	adc	r26, r1
  80:	b1 1d       	adc	r27, r1
  82:	b5 95       	asr	r27
  84:	a7 95       	ror	r26
  86:	97 95       	ror	r25
  88:	87 95       	ror	r24

	UBRRH = baud_setting >> 8;
  8a:	29 2f       	mov	r18, r25
  8c:	33 27       	eor	r19, r19
  8e:	22 b9       	out	0x02, r18	; 2
	UBRRL = baud_setting;
  90:	89 b9       	out	0x09, r24	; 9

	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	88 69       	ori	r24, 0x98	; 152
  96:	8a b9       	out	0x0a, r24	; 10
	UCSRB &= ~UDRE;
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	8a 7f       	andi	r24, 0xFA	; 250
  9c:	8a b9       	out	0x0a, r24	; 10
  9e:	08 95       	ret

000000a0 <_Z4CRC8PKht>:
bool		motorOn = false;
bool		motorDirection = false;
uint8_t		motorSpeed = 150;


unsigned char CRC8(const unsigned char* data, unsigned short len) {
  a0:	fc 01       	movw	r30, r24
  a2:	dc 01       	movw	r26, r24
  a4:	a6 0f       	add	r26, r22
  a6:	b7 1f       	adc	r27, r23
	unsigned char crc = 0x00;
  a8:	20 e0       	ldi	r18, 0x00	; 0
		unsigned char extract = *data++;
		for (unsigned char tempI = 8; tempI; tempI--) {
			unsigned char sum = (crc ^ extract) & 0x01;
			crc >>= 1;
			if (sum) {
				crc ^= 0x8C;
  aa:	7c e8       	ldi	r23, 0x8C	; 140
uint8_t		motorSpeed = 150;


unsigned char CRC8(const unsigned char* data, unsigned short len) {
	unsigned char crc = 0x00;
	while (len--) {
  ac:	ae 17       	cp	r26, r30
  ae:	bf 07       	cpc	r27, r31
  b0:	89 f0       	breq	.+34     	; 0xd4 <_Z4CRC8PKht+0x34>
		unsigned char extract = *data++;
  b2:	41 91       	ld	r20, Z+
  b4:	38 e0       	ldi	r19, 0x08	; 8
		for (unsigned char tempI = 8; tempI; tempI--) {
			unsigned char sum = (crc ^ extract) & 0x01;
  b6:	52 2f       	mov	r21, r18
  b8:	54 27       	eor	r21, r20
			crc >>= 1;
  ba:	82 2f       	mov	r24, r18
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	95 95       	asr	r25
  c0:	87 95       	ror	r24
  c2:	28 2f       	mov	r18, r24
			if (sum) {
  c4:	50 ff       	sbrs	r21, 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <_Z4CRC8PKht+0x2c>
				crc ^= 0x8C;
  c8:	27 2f       	mov	r18, r23
  ca:	28 27       	eor	r18, r24
			}
			extract >>= 1;
  cc:	46 95       	lsr	r20
  ce:	31 50       	subi	r19, 0x01	; 1

unsigned char CRC8(const unsigned char* data, unsigned short len) {
	unsigned char crc = 0x00;
	while (len--) {
		unsigned char extract = *data++;
		for (unsigned char tempI = 8; tempI; tempI--) {
  d0:	91 f7       	brne	.-28     	; 0xb6 <_Z4CRC8PKht+0x16>
  d2:	ec cf       	rjmp	.-40     	; 0xac <_Z4CRC8PKht+0xc>
			}
			extract >>= 1;
		}
	}
	return crc;
}
  d4:	82 2f       	mov	r24, r18
  d6:	08 95       	ret

000000d8 <_Z19processReceivedDatah>:

void processReceivedData(uint8_t dataIn)
{
  d8:	cf 93       	push	r28
	//'O'
	if(ser_header_pos == 3){
  da:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <ser_header_pos>
  de:	93 30       	cpi	r25, 0x03	; 3
  e0:	51 f4       	brne	.+20     	; 0xf6 <__stack+0x17>
		if(dataIn == 79){
  e2:	8f 34       	cpi	r24, 0x4F	; 79
  e4:	29 f4       	brne	.+10     	; 0xf0 <__stack+0x11>

			//start new data
			ser_header_pos = 0;
  e6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <ser_header_pos>
			ser_data_pos = 0;
  ea:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ser_data_pos>
			
			return;
  ee:	71 c0       	rjmp	.+226    	; 0x1d2 <__stack+0xf3>
			
			}else{
			ser_header_pos = 0;
  f0:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <ser_header_pos>
  f4:	12 c0       	rjmp	.+36     	; 0x11a <__stack+0x3b>
		}
	}
	//'T'
	if(ser_header_pos == 2){
  f6:	92 30       	cpi	r25, 0x02	; 2
  f8:	31 f4       	brne	.+12     	; 0x106 <__stack+0x27>
		if(dataIn == 84)ser_header_pos++;
  fa:	84 35       	cpi	r24, 0x54	; 84
  fc:	91 f4       	brne	.+36     	; 0x122 <__stack+0x43>
  fe:	93 e0       	ldi	r25, 0x03	; 3
 100:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ser_header_pos>
 104:	16 c0       	rjmp	.+44     	; 0x132 <__stack+0x53>
		else{
			ser_header_pos = 0;
		}
	}
	//'O'
	if(ser_header_pos == 1){
 106:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <ser_header_pos>
 10a:	91 30       	cpi	r25, 0x01	; 1
 10c:	31 f4       	brne	.+12     	; 0x11a <__stack+0x3b>
		if(dataIn == 79)ser_header_pos++;
 10e:	8f 34       	cpi	r24, 0x4F	; 79
 110:	41 f4       	brne	.+16     	; 0x122 <__stack+0x43>
 112:	92 e0       	ldi	r25, 0x02	; 2
 114:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ser_header_pos>
 118:	0c c0       	rjmp	.+24     	; 0x132 <__stack+0x53>
		else{
			ser_header_pos = 0;
		}
	}
	//'M'
	if(ser_header_pos == 0){
 11a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <ser_header_pos>
 11e:	91 11       	cpse	r25, r1
 120:	08 c0       	rjmp	.+16     	; 0x132 <__stack+0x53>
		if(dataIn == 77)ser_header_pos++;
 122:	8d 34       	cpi	r24, 0x4D	; 77
 124:	21 f4       	brne	.+8      	; 0x12e <__stack+0x4f>
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ser_header_pos>
 12c:	02 c0       	rjmp	.+4      	; 0x132 <__stack+0x53>
		else{
			ser_header_pos = 0;
 12e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <ser_header_pos>
		}
	}
	
	if(ser_data_pos < DATA_SIZE){
 132:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <ser_data_pos>
 136:	97 30       	cpi	r25, 0x07	; 7
 138:	28 f4       	brcc	.+10     	; 0x144 <__stack+0x65>
		
		data[ser_data_pos] = dataIn;
 13a:	e9 2f       	mov	r30, r25
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	e9 59       	subi	r30, 0x99	; 153
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	80 83       	st	Z, r24
		
	}
	
	if(ser_data_pos == DATA_SIZE){
 144:	97 30       	cpi	r25, 0x07	; 7
 146:	09 f0       	breq	.+2      	; 0x14a <__stack+0x6b>
 148:	3f c0       	rjmp	.+126    	; 0x1c8 <__stack+0xe9>
 14a:	c8 2f       	mov	r28, r24
		
		crc = CRC8((const unsigned char*)&data, DATA_SIZE);
 14c:	67 e0       	ldi	r22, 0x07	; 7
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	87 e6       	ldi	r24, 0x67	; 103
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	a5 df       	rcall	.-182    	; 0xa0 <_Z4CRC8PKht>
 156:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <crc>
		
		if(crc == dataIn && 
 15a:	c8 13       	cpse	r28, r24
 15c:	35 c0       	rjmp	.+106    	; 0x1c8 <__stack+0xe9>
 15e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <data+0x3>
 162:	83 35       	cpi	r24, 0x53	; 83
 164:	89 f5       	brne	.+98     	; 0x1c8 <__stack+0xe9>
			data[3] == 'S' &&
 166:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <data+0x4>
 16a:	84 35       	cpi	r24, 0x54	; 84
 16c:	69 f5       	brne	.+90     	; 0x1c8 <__stack+0xe9>
			data[4] == 'T' &&
 16e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <data+0x5>
 172:	80 35       	cpi	r24, 0x50	; 80
 174:	49 f5       	brne	.+82     	; 0x1c8 <__stack+0xe9>
			data[5] == 'P' &&
 176:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <data+0x6>
 17a:	82 35       	cpi	r24, 0x52	; 82
 17c:	29 f5       	brne	.+74     	; 0x1c8 <__stack+0xe9>
			data[6] == 'R'){

			motorOn = (data[0] > 0);
 17e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <data>
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	81 11       	cpse	r24, r1
 186:	01 c0       	rjmp	.+2      	; 0x18a <__stack+0xab>
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <motorOn>
			motorDirection = (data[1] > 0);
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <data+0x1>
 194:	21 11       	cpse	r18, r1
 196:	01 c0       	rjmp	.+2      	; 0x19a <__stack+0xbb>
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__data_end>
			motorSpeed = data[2];
 19e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <data+0x2>
 1a2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
			
			if(motorOn)CLEARBIT(PORTB, 1);
 1a6:	88 23       	and	r24, r24
 1a8:	11 f0       	breq	.+4      	; 0x1ae <__stack+0xcf>
 1aa:	c1 98       	cbi	0x18, 1	; 24
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <__stack+0xd1>
			else SETBIT(PORTB, 1);
 1ae:	c1 9a       	sbi	0x18, 1	; 24
			
			if(motorDirection)CLEARBIT(PORTB, 2);
 1b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1b4:	88 23       	and	r24, r24
 1b6:	11 f0       	breq	.+4      	; 0x1bc <__stack+0xdd>
 1b8:	c2 98       	cbi	0x18, 2	; 24
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <__stack+0xdf>
			else SETBIT(PORTB, 2);		
 1bc:	c2 9a       	sbi	0x18, 2	; 24
			
			OCR1A = motorSpeed;	
 1be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	9b bd       	out	0x2b, r25	; 43
 1c6:	8a bd       	out	0x2a, r24	; 42
		}

	}
	
	ser_data_pos++;
 1c8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ser_data_pos>
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ser_data_pos>
}
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <__vector_7>:

ISR(USART_RX_vect)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	unsigned char c = UDR;
 1f8:	8c b1       	in	r24, 0x0c	; 12
	processReceivedData(c);
 1fa:	6e df       	rcall	.-292    	; 0xd8 <_Z19processReceivedDatah>
	}
	if(c == 'd'){
		CLEARBIT(PORTB, 2);
	}	
	*/
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <main>:
	
	//B1 - ENA
	//B2 - DIR
	//B3 - PUL
	
	SETBIT(DDRB, 1);
 21e:	b9 9a       	sbi	0x17, 1	; 23
	SETBIT(DDRB, 2);
 220:	ba 9a       	sbi	0x17, 2	; 23
	SETBIT(DDRB, 3);
 222:	bb 9a       	sbi	0x17, 3	; 23
	
	SETBIT(PORTB, 1);
 224:	c1 9a       	sbi	0x18, 1	; 24
	CLEARBIT(PORTB, 2);
 226:	c2 98       	cbi	0x18, 2	; 24
	CLEARBIT(PORTB, 3);
 228:	c3 98       	cbi	0x18, 3	; 24
	
	sei();
 22a:	78 94       	sei
	
	serialBegin(115200);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	72 ec       	ldi	r23, 0xC2	; 194
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	12 df       	rcall	.-476    	; 0x5a <_Z11serialBeginl>

	//Set up OC1A CTC mode

	// Set up timer with prescaler = 64 and CTC mode
    TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
 236:	8e b5       	in	r24, 0x2e	; 46
 238:	8b 60       	ori	r24, 0x0B	; 11
 23a:	8e bd       	out	0x2e, r24	; 46

    // set up timer OC1A pin in toggle mode
    TCCR1A |= (1 << COM1A0);
 23c:	8f b5       	in	r24, 0x2f	; 47
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	8f bd       	out	0x2f, r24	; 47
	
	// initialize counter
	TCNT1 = 0;
 242:	1d bc       	out	0x2d, r1	; 45
 244:	1c bc       	out	0x2c, r1	; 44

	// initialize compare value
	OCR1A = 110; //110-200
 246:	8e e6       	ldi	r24, 0x6E	; 110
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	9b bd       	out	0x2b, r25	; 43
 24c:	8a bd       	out	0x2a, r24	; 42
 24e:	ff cf       	rjmp	.-2      	; 0x24e <main+0x30>

00000250 <__divmodsi4>:
 250:	05 2e       	mov	r0, r21
 252:	97 fb       	bst	r25, 7
 254:	16 f4       	brtc	.+4      	; 0x25a <__divmodsi4+0xa>
 256:	00 94       	com	r0
 258:	0f d0       	rcall	.+30     	; 0x278 <__negsi2>
 25a:	57 fd       	sbrc	r21, 7
 25c:	05 d0       	rcall	.+10     	; 0x268 <__divmodsi4_neg2>
 25e:	14 d0       	rcall	.+40     	; 0x288 <__udivmodsi4>
 260:	07 fc       	sbrc	r0, 7
 262:	02 d0       	rcall	.+4      	; 0x268 <__divmodsi4_neg2>
 264:	46 f4       	brtc	.+16     	; 0x276 <__divmodsi4_exit>
 266:	08 c0       	rjmp	.+16     	; 0x278 <__negsi2>

00000268 <__divmodsi4_neg2>:
 268:	50 95       	com	r21
 26a:	40 95       	com	r20
 26c:	30 95       	com	r19
 26e:	21 95       	neg	r18
 270:	3f 4f       	sbci	r19, 0xFF	; 255
 272:	4f 4f       	sbci	r20, 0xFF	; 255
 274:	5f 4f       	sbci	r21, 0xFF	; 255

00000276 <__divmodsi4_exit>:
 276:	08 95       	ret

00000278 <__negsi2>:
 278:	90 95       	com	r25
 27a:	80 95       	com	r24
 27c:	70 95       	com	r23
 27e:	61 95       	neg	r22
 280:	7f 4f       	sbci	r23, 0xFF	; 255
 282:	8f 4f       	sbci	r24, 0xFF	; 255
 284:	9f 4f       	sbci	r25, 0xFF	; 255
 286:	08 95       	ret

00000288 <__udivmodsi4>:
 288:	a1 e2       	ldi	r26, 0x21	; 33
 28a:	1a 2e       	mov	r1, r26
 28c:	aa 1b       	sub	r26, r26
 28e:	bb 1b       	sub	r27, r27
 290:	fd 01       	movw	r30, r26
 292:	0d c0       	rjmp	.+26     	; 0x2ae <__udivmodsi4_ep>

00000294 <__udivmodsi4_loop>:
 294:	aa 1f       	adc	r26, r26
 296:	bb 1f       	adc	r27, r27
 298:	ee 1f       	adc	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	a2 17       	cp	r26, r18
 29e:	b3 07       	cpc	r27, r19
 2a0:	e4 07       	cpc	r30, r20
 2a2:	f5 07       	cpc	r31, r21
 2a4:	20 f0       	brcs	.+8      	; 0x2ae <__udivmodsi4_ep>
 2a6:	a2 1b       	sub	r26, r18
 2a8:	b3 0b       	sbc	r27, r19
 2aa:	e4 0b       	sbc	r30, r20
 2ac:	f5 0b       	sbc	r31, r21

000002ae <__udivmodsi4_ep>:
 2ae:	66 1f       	adc	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	88 1f       	adc	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	1a 94       	dec	r1
 2b8:	69 f7       	brne	.-38     	; 0x294 <__udivmodsi4_loop>
 2ba:	60 95       	com	r22
 2bc:	70 95       	com	r23
 2be:	80 95       	com	r24
 2c0:	90 95       	com	r25
 2c2:	9b 01       	movw	r18, r22
 2c4:	ac 01       	movw	r20, r24
 2c6:	bd 01       	movw	r22, r26
 2c8:	cf 01       	movw	r24, r30
 2ca:	08 95       	ret

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
