
SR2019_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000330  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ff  00800100  00800100  000003a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7e  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d8  00000000  00000000  000011f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000591  00000000  00000000  00001ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00002060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067e  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000646  00000000  00000000  000027f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002e38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	b4 c0       	rjmp	.+360    	; 0x18e <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	22 e0       	ldi	r18, 0x02	; 2
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	af 3f       	cpi	r26, 0xFF	; 255
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	c3 d0       	rcall	.+390    	; 0x1d8 <main>
  52:	6c c1       	rjmp	.+728    	; 0x32c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z11serialBeginl>:
	while (*str)serialWrite(*str++);
	serialWrite('\r');
	serialWrite('\n');
}
void serialBegin(long baud)
{
  56:	9b 01       	movw	r18, r22
  58:	ac 01       	movw	r20, r24
	uint16_t baud_setting;

	UCSR0A = 0;
  5a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
	baud_setting = (F_CPU / 8 / baud - 1) / 2;
  5e:	60 ea       	ldi	r22, 0xA0	; 160
  60:	75 e2       	ldi	r23, 0x25	; 37
  62:	86 e2       	ldi	r24, 0x26	; 38
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	24 d1       	rcall	.+584    	; 0x2b0 <__divmodsi4>
  68:	ba 01       	movw	r22, r20
  6a:	a9 01       	movw	r20, r18
  6c:	41 50       	subi	r20, 0x01	; 1
  6e:	51 09       	sbc	r21, r1
  70:	61 09       	sbc	r22, r1
  72:	71 09       	sbc	r23, r1
  74:	db 01       	movw	r26, r22
  76:	ca 01       	movw	r24, r20
  78:	1a f4       	brpl	.+6      	; 0x80 <_Z11serialBeginl+0x2a>
  7a:	01 96       	adiw	r24, 0x01	; 1
  7c:	a1 1d       	adc	r26, r1
  7e:	b1 1d       	adc	r27, r1
  80:	b5 95       	asr	r27
  82:	a7 95       	ror	r26
  84:	97 95       	ror	r25
  86:	87 95       	ror	r24

	UBRR0H = baud_setting >> 8;
  88:	29 2f       	mov	r18, r25
  8a:	33 27       	eor	r19, r19
  8c:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
	UBRR0L = baud_setting;
  90:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>

	UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  94:	e1 ec       	ldi	r30, 0xC1	; 193
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	88 69       	ori	r24, 0x98	; 152
  9c:	80 83       	st	Z, r24
	UCSR0B &= ~UDRE0;
  9e:	80 81       	ld	r24, Z
  a0:	8a 7f       	andi	r24, 0xFA	; 250
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <_Z19processReceivedDatah>:
uint8_t		crc;

#define DATA_SIZE 252

void processReceivedData(uint8_t data)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	//'9'
	if(ser_header_pos == 3){
  aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ser_header_pos>
  ae:	93 30       	cpi	r25, 0x03	; 3
  b0:	51 f4       	brne	.+20     	; 0xc6 <_Z19processReceivedDatah+0x20>
		if(data == 57){
  b2:	89 33       	cpi	r24, 0x39	; 57
  b4:	29 f4       	brne	.+10     	; 0xc0 <_Z19processReceivedDatah+0x1a>

			//start new data
			ser_header_pos = 0;
  b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ser_header_pos>
			ser_data_pos = 0;
  ba:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ser_data_pos>
			
			return;
  be:	64 c0       	rjmp	.+200    	; 0x188 <_Z19processReceivedDatah+0xe2>
			
			}else{
			ser_header_pos = 0;
  c0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ser_header_pos>
  c4:	12 c0       	rjmp	.+36     	; 0xea <_Z19processReceivedDatah+0x44>
		}
	}
	//'1'
	if(ser_header_pos == 2){
  c6:	92 30       	cpi	r25, 0x02	; 2
  c8:	31 f4       	brne	.+12     	; 0xd6 <_Z19processReceivedDatah+0x30>
		if(data == 49)ser_header_pos++;
  ca:	81 33       	cpi	r24, 0x31	; 49
  cc:	91 f4       	brne	.+36     	; 0xf2 <_Z19processReceivedDatah+0x4c>
  ce:	93 e0       	ldi	r25, 0x03	; 3
  d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <ser_header_pos>
  d4:	16 c0       	rjmp	.+44     	; 0x102 <_Z19processReceivedDatah+0x5c>
		else{
			ser_header_pos = 0;
		}
	}
	//'R'
	if(ser_header_pos == 1){
  d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ser_header_pos>
  da:	91 30       	cpi	r25, 0x01	; 1
  dc:	31 f4       	brne	.+12     	; 0xea <_Z19processReceivedDatah+0x44>
		if(data == 82)ser_header_pos++;
  de:	82 35       	cpi	r24, 0x52	; 82
  e0:	41 f4       	brne	.+16     	; 0xf2 <_Z19processReceivedDatah+0x4c>
  e2:	92 e0       	ldi	r25, 0x02	; 2
  e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <ser_header_pos>
  e8:	0c c0       	rjmp	.+24     	; 0x102 <_Z19processReceivedDatah+0x5c>
		else{
			ser_header_pos = 0;
		}
	}
	//'S'
	if(ser_header_pos == 0){
  ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ser_header_pos>
  ee:	91 11       	cpse	r25, r1
  f0:	08 c0       	rjmp	.+16     	; 0x102 <_Z19processReceivedDatah+0x5c>
		if(data == 83)ser_header_pos++;
  f2:	83 35       	cpi	r24, 0x53	; 83
  f4:	21 f4       	brne	.+8      	; 0xfe <_Z19processReceivedDatah+0x58>
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <ser_header_pos>
  fc:	02 c0       	rjmp	.+4      	; 0x102 <_Z19processReceivedDatah+0x5c>
		else{
			ser_header_pos = 0;
  fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ser_header_pos>
		}
	}
	
	if(ser_data_pos < DATA_SIZE){
 102:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <ser_data_pos>
 106:	ac 3f       	cpi	r26, 0xFC	; 252
 108:	68 f4       	brcc	.+26     	; 0x124 <_Z19processReceivedDatah+0x7e>
		
		bufferedData[!currentBuffer][ser_data_pos] = data;
 10a:	e0 91 fd 02 	lds	r30, 0x02FD	; 0x8002fd <currentBuffer>
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	e9 27       	eor	r30, r25
 112:	9d ef       	ldi	r25, 0xFD	; 253
 114:	e9 9f       	mul	r30, r25
 116:	f0 01       	movw	r30, r0
 118:	11 24       	eor	r1, r1
 11a:	ed 5f       	subi	r30, 0xFD	; 253
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	ea 0f       	add	r30, r26
 120:	f1 1d       	adc	r31, r1
 122:	80 83       	st	Z, r24
		
	}
	
	if(ser_data_pos == DATA_SIZE){
 124:	ac 3f       	cpi	r26, 0xFC	; 252
 126:	69 f5       	brne	.+90     	; 0x182 <_Z19processReceivedDatah+0xdc>
		
		crc = CRC8((const unsigned char*)&bufferedData[!currentBuffer], DATA_SIZE);
 128:	b0 91 fd 02 	lds	r27, 0x02FD	; 0x8002fd <currentBuffer>
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	b9 27       	eor	r27, r25
 130:	9d ef       	ldi	r25, 0xFD	; 253
 132:	b9 9f       	mul	r27, r25
 134:	f0 01       	movw	r30, r0
 136:	11 24       	eor	r1, r1
 138:	ed 5f       	subi	r30, 0xFD	; 253
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	ef 01       	movw	r28, r30
 13e:	c4 50       	subi	r28, 0x04	; 4
 140:	df 4f       	sbci	r29, 0xFF	; 255
#include "light_ws2812.h"

#include "Serial.h"

static unsigned char CRC8(const unsigned char* data, unsigned short len) {
	unsigned char crc = 0x00;
 142:	90 e0       	ldi	r25, 0x00	; 0
		unsigned char extract = *data++;
		for (unsigned char tempI = 8; tempI; tempI--) {
			unsigned char sum = (crc ^ extract) & 0x01;
			crc >>= 1;
			if (sum) {
				crc ^= 0x8C;
 144:	7c e8       	ldi	r23, 0x8C	; 140
 146:	03 c0       	rjmp	.+6      	; 0x14e <_Z19processReceivedDatah+0xa8>

#include "Serial.h"

static unsigned char CRC8(const unsigned char* data, unsigned short len) {
	unsigned char crc = 0x00;
	while (len--) {
 148:	ce 17       	cp	r28, r30
 14a:	df 07       	cpc	r29, r31
 14c:	89 f0       	breq	.+34     	; 0x170 <_Z19processReceivedDatah+0xca>
		unsigned char extract = *data++;
 14e:	51 91       	ld	r21, Z+
 150:	48 e0       	ldi	r20, 0x08	; 8
		for (unsigned char tempI = 8; tempI; tempI--) {
			unsigned char sum = (crc ^ extract) & 0x01;
 152:	69 2f       	mov	r22, r25
 154:	65 27       	eor	r22, r21
			crc >>= 1;
 156:	29 2f       	mov	r18, r25
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	35 95       	asr	r19
 15c:	27 95       	ror	r18
 15e:	92 2f       	mov	r25, r18
			if (sum) {
 160:	60 ff       	sbrs	r22, 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <_Z19processReceivedDatah+0xc2>
				crc ^= 0x8C;
 164:	97 2f       	mov	r25, r23
 166:	92 27       	eor	r25, r18
			}
			extract >>= 1;
 168:	56 95       	lsr	r21
 16a:	41 50       	subi	r20, 0x01	; 1

static unsigned char CRC8(const unsigned char* data, unsigned short len) {
	unsigned char crc = 0x00;
	while (len--) {
		unsigned char extract = *data++;
		for (unsigned char tempI = 8; tempI; tempI--) {
 16c:	91 f7       	brne	.-28     	; 0x152 <_Z19processReceivedDatah+0xac>
 16e:	ec cf       	rjmp	.-40     	; 0x148 <_Z19processReceivedDatah+0xa2>
 170:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
		
		if(crc == data){
 174:	89 13       	cpse	r24, r25
 176:	05 c0       	rjmp	.+10     	; 0x182 <_Z19processReceivedDatah+0xdc>
			
			currentBuffer = !currentBuffer;
 178:	b0 93 fd 02 	sts	0x02FD, r27	; 0x8002fd <currentBuffer>
			
			dataUpdated = 1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <dataUpdated>
			
		}

	}
	
	ser_data_pos++;
 182:	af 5f       	subi	r26, 0xFF	; 255
 184:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <ser_data_pos>
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <__vector_18>:

uint8_t index = 0;

ISR(USART_RX_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	unsigned char c = UDR0;
 1b0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	
	//serialWrite(c);
	
	processReceivedData(c);
 1b4:	78 df       	rcall	.-272    	; 0xa6 <_Z19processReceivedDatah>
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <main>:

int main(void)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	00 d0       	rcall	.+0      	; 0x1de <main+0x6>
 1de:	1f 92       	push	r1
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
	/**/
	
	struct cRGB nullLed[1];
	
	nullLed[0].r = 255;
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	8a 83       	std	Y+2, r24	; 0x02
	nullLed[0].g = 0;
 1e8:	19 82       	std	Y+1, r1	; 0x01
	nullLed[0].b = 0;
 1ea:	1b 82       	std	Y+3, r1	; 0x03
	
	serialBegin(115200);
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	72 ec       	ldi	r23, 0xC2	; 194
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	30 df       	rcall	.-416    	; 0x56 <_Z11serialBeginl>

	sei();
 1f6:	78 94       	sei
 1f8:	ae 01       	movw	r20, r28
 1fa:	4c 5f       	subi	r20, 0xFC	; 252
 1fc:	5f 4f       	sbci	r21, 0xFF	; 255
		cli();
		if(dataUpdated == 1){

			ws2812_setleds_nrs(nullLed, 1);

			ws2812_setleds_array((uint8_t*)&bufferedData[currentBuffer], 84);
 1fe:	bd ef       	ldi	r27, 0xFD	; 253

	sei();
	
	do{

		cli();
 200:	f8 94       	cli
		if(dataUpdated == 1){
 202:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <dataUpdated>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	09 f0       	breq	.+2      	; 0x20c <main+0x34>
 20a:	50 c0       	rjmp	.+160    	; 0x2ac <loop464+0x3a>
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
	uint8_t curbyte,ctr,masklo;
	uint8_t sreg_prev;
	
	ws2812_DDRREG |= maskhi; // Enable output
 20c:	22 9a       	sbi	0x04, 2	; 4
	
	masklo	=~maskhi&ws2812_PORTREG;
 20e:	25 b1       	in	r18, 0x05	; 5
 210:	2b 7f       	andi	r18, 0xFB	; 251
	maskhi |=        ws2812_PORTREG;
 212:	95 b1       	in	r25, 0x05	; 5
 214:	94 60       	ori	r25, 0x04	; 4
	
	sreg_prev=SREG;
 216:	6f b7       	in	r22, 0x3f	; 63
	cli();
 218:	f8 94       	cli
 21a:	fe 01       	movw	r30, r28
 21c:	31 96       	adiw	r30, 0x01	; 1

	while (datlen--) {
		curbyte=*data++;
 21e:	81 91       	ld	r24, Z+

		"       dec   %0    \n\t"    //  '1' [+2] '0' [+2]
		"       brne  loop%=\n\t"    //  '1' [+3] '0' [+4]
		:	"=&d" (ctr)
		:	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
		);
 220:	38 e0       	ldi	r19, 0x08	; 8

00000222 <loop393>:
 222:	95 b9       	out	0x05, r25	; 5
 224:	00 00       	nop
 226:	00 c0       	rjmp	.+0      	; 0x228 <loop393+0x6>
 228:	00 c0       	rjmp	.+0      	; 0x22a <loop393+0x8>
 22a:	87 ff       	sbrs	r24, 7
 22c:	25 b9       	out	0x05, r18	; 5
 22e:	88 0f       	add	r24, r24
 230:	00 00       	nop
 232:	00 c0       	rjmp	.+0      	; 0x234 <loop393+0x12>
 234:	00 c0       	rjmp	.+0      	; 0x236 <loop393+0x14>
 236:	00 c0       	rjmp	.+0      	; 0x238 <loop393+0x16>
 238:	00 c0       	rjmp	.+0      	; 0x23a <loop393+0x18>
 23a:	25 b9       	out	0x05, r18	; 5
 23c:	00 00       	nop
 23e:	00 c0       	rjmp	.+0      	; 0x240 <loop393+0x1e>
 240:	3a 95       	dec	r19
 242:	79 f7       	brne	.-34     	; 0x222 <loop393>
	maskhi |=        ws2812_PORTREG;
	
	sreg_prev=SREG;
	cli();

	while (datlen--) {
 244:	4e 17       	cp	r20, r30
 246:	5f 07       	cpc	r21, r31
 248:	51 f7       	brne	.-44     	; 0x21e <main+0x46>
		:	"=&d" (ctr)
		:	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
		);
	}
	
	SREG=sreg_prev;
 24a:	6f bf       	out	0x3f, r22	; 63

			ws2812_setleds_nrs(nullLed, 1);

			ws2812_setleds_array((uint8_t*)&bufferedData[currentBuffer], 84);
 24c:	20 91 fd 02 	lds	r18, 0x02FD	; 0x8002fd <currentBuffer>
 250:	b2 9f       	mul	r27, r18
 252:	90 01       	movw	r18, r0
 254:	11 24       	eor	r1, r1
 256:	2d 5f       	subi	r18, 0xFD	; 253
 258:	3e 4f       	sbci	r19, 0xFE	; 254
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
	uint8_t curbyte,ctr,masklo;
	uint8_t sreg_prev;
	
	ws2812_DDRREG |= maskhi; // Enable output
 25a:	22 9a       	sbi	0x04, 2	; 4
	
	masklo	=~maskhi&ws2812_PORTREG;
 25c:	65 b1       	in	r22, 0x05	; 5
 25e:	6b 7f       	andi	r22, 0xFB	; 251
	maskhi |=        ws2812_PORTREG;
 260:	95 b1       	in	r25, 0x05	; 5
 262:	94 60       	ori	r25, 0x04	; 4
	
	sreg_prev=SREG;
 264:	af b7       	in	r26, 0x3f	; 63
	cli();
 266:	f8 94       	cli
 268:	f9 01       	movw	r30, r18
 26a:	24 50       	subi	r18, 0x04	; 4
 26c:	3f 4f       	sbci	r19, 0xFF	; 255

	while (datlen--) {
		curbyte=*data++;
 26e:	81 91       	ld	r24, Z+

		"       dec   %0    \n\t"    //  '1' [+2] '0' [+2]
		"       brne  loop%=\n\t"    //  '1' [+3] '0' [+4]
		:	"=&d" (ctr)
		:	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
		);
 270:	78 e0       	ldi	r23, 0x08	; 8

00000272 <loop464>:
 272:	95 b9       	out	0x05, r25	; 5
 274:	00 00       	nop
 276:	00 c0       	rjmp	.+0      	; 0x278 <loop464+0x6>
 278:	00 c0       	rjmp	.+0      	; 0x27a <loop464+0x8>
 27a:	87 ff       	sbrs	r24, 7
 27c:	65 b9       	out	0x05, r22	; 5
 27e:	88 0f       	add	r24, r24
 280:	00 00       	nop
 282:	00 c0       	rjmp	.+0      	; 0x284 <loop464+0x12>
 284:	00 c0       	rjmp	.+0      	; 0x286 <loop464+0x14>
 286:	00 c0       	rjmp	.+0      	; 0x288 <loop464+0x16>
 288:	00 c0       	rjmp	.+0      	; 0x28a <loop464+0x18>
 28a:	65 b9       	out	0x05, r22	; 5
 28c:	00 00       	nop
 28e:	00 c0       	rjmp	.+0      	; 0x290 <loop464+0x1e>
 290:	7a 95       	dec	r23
 292:	79 f7       	brne	.-34     	; 0x272 <loop464>
	maskhi |=        ws2812_PORTREG;
	
	sreg_prev=SREG;
	cli();

	while (datlen--) {
 294:	2e 17       	cp	r18, r30
 296:	3f 07       	cpc	r19, r31
 298:	51 f7       	brne	.-44     	; 0x26e <loop393+0x4c>
		:	"=&d" (ctr)
		:	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
		);
	}
	
	SREG=sreg_prev;
 29a:	af bf       	out	0x3f, r26	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	8b ed       	ldi	r24, 0xDB	; 219
 29e:	95 e0       	ldi	r25, 0x05	; 5
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <loop464+0x2e>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <loop464+0x34>
 2a6:	00 00       	nop
			
			dataUpdated = 0;
 2a8:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <dataUpdated>
		}
		sei();
 2ac:	78 94       	sei
	
	serialBegin(115200);

	sei();
	
	do{
 2ae:	a8 cf       	rjmp	.-176    	; 0x200 <main+0x28>

000002b0 <__divmodsi4>:
 2b0:	05 2e       	mov	r0, r21
 2b2:	97 fb       	bst	r25, 7
 2b4:	16 f4       	brtc	.+4      	; 0x2ba <__divmodsi4+0xa>
 2b6:	00 94       	com	r0
 2b8:	0f d0       	rcall	.+30     	; 0x2d8 <__negsi2>
 2ba:	57 fd       	sbrc	r21, 7
 2bc:	05 d0       	rcall	.+10     	; 0x2c8 <__divmodsi4_neg2>
 2be:	14 d0       	rcall	.+40     	; 0x2e8 <__udivmodsi4>
 2c0:	07 fc       	sbrc	r0, 7
 2c2:	02 d0       	rcall	.+4      	; 0x2c8 <__divmodsi4_neg2>
 2c4:	46 f4       	brtc	.+16     	; 0x2d6 <__divmodsi4_exit>
 2c6:	08 c0       	rjmp	.+16     	; 0x2d8 <__negsi2>

000002c8 <__divmodsi4_neg2>:
 2c8:	50 95       	com	r21
 2ca:	40 95       	com	r20
 2cc:	30 95       	com	r19
 2ce:	21 95       	neg	r18
 2d0:	3f 4f       	sbci	r19, 0xFF	; 255
 2d2:	4f 4f       	sbci	r20, 0xFF	; 255
 2d4:	5f 4f       	sbci	r21, 0xFF	; 255

000002d6 <__divmodsi4_exit>:
 2d6:	08 95       	ret

000002d8 <__negsi2>:
 2d8:	90 95       	com	r25
 2da:	80 95       	com	r24
 2dc:	70 95       	com	r23
 2de:	61 95       	neg	r22
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255
 2e2:	8f 4f       	sbci	r24, 0xFF	; 255
 2e4:	9f 4f       	sbci	r25, 0xFF	; 255
 2e6:	08 95       	ret

000002e8 <__udivmodsi4>:
 2e8:	a1 e2       	ldi	r26, 0x21	; 33
 2ea:	1a 2e       	mov	r1, r26
 2ec:	aa 1b       	sub	r26, r26
 2ee:	bb 1b       	sub	r27, r27
 2f0:	fd 01       	movw	r30, r26
 2f2:	0d c0       	rjmp	.+26     	; 0x30e <__udivmodsi4_ep>

000002f4 <__udivmodsi4_loop>:
 2f4:	aa 1f       	adc	r26, r26
 2f6:	bb 1f       	adc	r27, r27
 2f8:	ee 1f       	adc	r30, r30
 2fa:	ff 1f       	adc	r31, r31
 2fc:	a2 17       	cp	r26, r18
 2fe:	b3 07       	cpc	r27, r19
 300:	e4 07       	cpc	r30, r20
 302:	f5 07       	cpc	r31, r21
 304:	20 f0       	brcs	.+8      	; 0x30e <__udivmodsi4_ep>
 306:	a2 1b       	sub	r26, r18
 308:	b3 0b       	sbc	r27, r19
 30a:	e4 0b       	sbc	r30, r20
 30c:	f5 0b       	sbc	r31, r21

0000030e <__udivmodsi4_ep>:
 30e:	66 1f       	adc	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	88 1f       	adc	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	1a 94       	dec	r1
 318:	69 f7       	brne	.-38     	; 0x2f4 <__udivmodsi4_loop>
 31a:	60 95       	com	r22
 31c:	70 95       	com	r23
 31e:	80 95       	com	r24
 320:	90 95       	com	r25
 322:	9b 01       	movw	r18, r22
 324:	ac 01       	movw	r20, r24
 326:	bd 01       	movw	r22, r26
 328:	cf 01       	movw	r24, r30
 32a:	08 95       	ret

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
