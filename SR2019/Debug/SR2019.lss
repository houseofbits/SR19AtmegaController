
SR2019.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ff  00800100  00800100  00000348  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c2c  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ae  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000556  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000606  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d0  00000000  00000000  00002556  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002a26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	b2 c0       	rjmp	.+356    	; 0x18a <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	22 e0       	ldi	r18, 0x02	; 2
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	af 3f       	cpi	r26, 0xFF	; 255
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	c1 d0       	rcall	.+386    	; 0x1d4 <main>
  52:	3e c1       	rjmp	.+636    	; 0x2d0 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z11serialBeginl>:
	while (*str)serialWrite(*str++);
	serialWrite('\r');
	serialWrite('\n');
}
void serialBegin(long baud)
{
  56:	9b 01       	movw	r18, r22
  58:	ac 01       	movw	r20, r24
	uint16_t baud_setting;

	UCSR0A = 0;
  5a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
	baud_setting = (F_CPU / 8 / baud - 1) / 2;
  5e:	60 ea       	ldi	r22, 0xA0	; 160
  60:	75 e2       	ldi	r23, 0x25	; 37
  62:	86 e2       	ldi	r24, 0x26	; 38
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	f6 d0       	rcall	.+492    	; 0x254 <__divmodsi4>
  68:	ca 01       	movw	r24, r20
  6a:	b9 01       	movw	r22, r18
  6c:	61 50       	subi	r22, 0x01	; 1
  6e:	71 09       	sbc	r23, r1
  70:	81 09       	sbc	r24, r1
  72:	91 09       	sbc	r25, r1
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	50 e0       	ldi	r21, 0x00	; 0
  7c:	eb d0       	rcall	.+470    	; 0x254 <__divmodsi4>

	UBRR0H = baud_setting >> 8;
  7e:	83 2f       	mov	r24, r19
  80:	99 27       	eor	r25, r25
  82:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
	UBRR0L = baud_setting;
  86:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>

	UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  8a:	e1 ec       	ldi	r30, 0xC1	; 193
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 69       	ori	r24, 0x98	; 152
  92:	80 83       	st	Z, r24
	UCSR0B &= ~UDRE0;
  94:	80 81       	ld	r24, Z
  96:	8a 7f       	andi	r24, 0xFA	; 250
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <_Z19processReceivedDatah>:
uint8_t		crc;

#define DATA_SIZE 252

void processReceivedData(uint8_t data)
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
	//'9'
	if(ser_header_pos == 3){
  a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ser_header_pos>
  a4:	93 30       	cpi	r25, 0x03	; 3
  a6:	39 f4       	brne	.+14     	; 0xb6 <_Z19processReceivedDatah+0x1a>
		if(data == 57){

			//start new data
			ser_header_pos = 0;
  a8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ser_header_pos>

void processReceivedData(uint8_t data)
{
	//'9'
	if(ser_header_pos == 3){
		if(data == 57){
  ac:	89 33       	cpi	r24, 0x39	; 57
  ae:	19 f4       	brne	.+6      	; 0xb6 <_Z19processReceivedDatah+0x1a>

			//start new data
			ser_header_pos = 0;
			ser_data_pos = 0;
  b0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ser_data_pos>
			
			return;
  b4:	67 c0       	rjmp	.+206    	; 0x184 <_Z19processReceivedDatah+0xe8>
			}else{
			ser_header_pos = 0;
		}
	}
	//'1'
	if(ser_header_pos == 2){
  b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ser_header_pos>
  ba:	92 30       	cpi	r25, 0x02	; 2
  bc:	41 f4       	brne	.+16     	; 0xce <_Z19processReceivedDatah+0x32>
		if(data == 49)ser_header_pos++;
  be:	81 33       	cpi	r24, 0x31	; 49
  c0:	21 f4       	brne	.+8      	; 0xca <_Z19processReceivedDatah+0x2e>
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <ser_header_pos>
  c8:	02 c0       	rjmp	.+4      	; 0xce <_Z19processReceivedDatah+0x32>
		else{
			ser_header_pos = 0;
  ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ser_header_pos>
		}
	}
	//'R'
	if(ser_header_pos == 1){
  ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ser_header_pos>
  d2:	91 30       	cpi	r25, 0x01	; 1
  d4:	41 f4       	brne	.+16     	; 0xe6 <_Z19processReceivedDatah+0x4a>
		if(data == 82)ser_header_pos++;
  d6:	82 35       	cpi	r24, 0x52	; 82
  d8:	21 f4       	brne	.+8      	; 0xe2 <_Z19processReceivedDatah+0x46>
  da:	92 e0       	ldi	r25, 0x02	; 2
  dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <ser_header_pos>
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <_Z19processReceivedDatah+0x4a>
		else{
			ser_header_pos = 0;
  e2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ser_header_pos>
		}
	}
	//'S'
	if(ser_header_pos == 0){
  e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ser_header_pos>
  ea:	91 11       	cpse	r25, r1
  ec:	08 c0       	rjmp	.+16     	; 0xfe <_Z19processReceivedDatah+0x62>
		if(data == 83)ser_header_pos++;
  ee:	83 35       	cpi	r24, 0x53	; 83
  f0:	21 f4       	brne	.+8      	; 0xfa <_Z19processReceivedDatah+0x5e>
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <ser_header_pos>
  f8:	02 c0       	rjmp	.+4      	; 0xfe <_Z19processReceivedDatah+0x62>
		else{
			ser_header_pos = 0;
  fa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ser_header_pos>
		}
	}
	
	if(ser_data_pos < DATA_SIZE){
  fe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ser_data_pos>
 102:	2c 3f       	cpi	r18, 0xFC	; 252
 104:	70 f4       	brcc	.+28     	; 0x122 <_Z19processReceivedDatah+0x86>
		
		bufferedData[!currentBuffer][ser_data_pos] = data;
 106:	e0 91 fd 02 	lds	r30, 0x02FD	; 0x8002fd <currentBuffer>
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	e9 27       	eor	r30, r25
 10e:	9d ef       	ldi	r25, 0xFD	; 253
 110:	e9 9f       	mul	r30, r25
 112:	f0 01       	movw	r30, r0
 114:	11 24       	eor	r1, r1
 116:	ed 5f       	subi	r30, 0xFD	; 253
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	e2 0f       	add	r30, r18
 11c:	f1 1d       	adc	r31, r1
 11e:	80 83       	st	Z, r24
 120:	2e c0       	rjmp	.+92     	; 0x17e <_Z19processReceivedDatah+0xe2>
		
	}
	
	if(ser_data_pos == DATA_SIZE){
 122:	2c 3f       	cpi	r18, 0xFC	; 252
 124:	61 f5       	brne	.+88     	; 0x17e <_Z19processReceivedDatah+0xe2>
		
		crc = CRC8((const unsigned char*)&bufferedData[!currentBuffer], DATA_SIZE);
 126:	30 91 fd 02 	lds	r19, 0x02FD	; 0x8002fd <currentBuffer>
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	39 27       	eor	r19, r25
 12e:	9d ef       	ldi	r25, 0xFD	; 253
 130:	39 9f       	mul	r19, r25
 132:	f0 01       	movw	r30, r0
 134:	11 24       	eor	r1, r1
 136:	ed 5f       	subi	r30, 0xFD	; 253
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	df 01       	movw	r26, r30
 13c:	a4 50       	subi	r26, 0x04	; 4
 13e:	bf 4f       	sbci	r27, 0xFF	; 255
#include "light_ws2812.h"

#include "Serial.h"

static unsigned char CRC8(const unsigned char* data, unsigned short len) {
	unsigned char crc = 0x00;
 140:	90 e0       	ldi	r25, 0x00	; 0
		unsigned char extract = *data++;
		for (unsigned char tempI = 8; tempI; tempI--) {
			unsigned char sum = (crc ^ extract) & 0x01;
			crc >>= 1;
			if (sum) {
				crc ^= 0x8C;
 142:	cc e8       	ldi	r28, 0x8C	; 140

#include "Serial.h"

static unsigned char CRC8(const unsigned char* data, unsigned short len) {
	unsigned char crc = 0x00;
	while (len--) {
 144:	ae 17       	cp	r26, r30
 146:	bf 07       	cpc	r27, r31
 148:	89 f0       	breq	.+34     	; 0x16c <_Z19processReceivedDatah+0xd0>
		unsigned char extract = *data++;
 14a:	71 91       	ld	r23, Z+
 14c:	68 e0       	ldi	r22, 0x08	; 8
		for (unsigned char tempI = 8; tempI; tempI--) {
			unsigned char sum = (crc ^ extract) & 0x01;
 14e:	d7 2f       	mov	r29, r23
 150:	d9 27       	eor	r29, r25
			crc >>= 1;
 152:	49 2f       	mov	r20, r25
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	55 95       	asr	r21
 158:	47 95       	ror	r20
 15a:	94 2f       	mov	r25, r20
			if (sum) {
 15c:	d0 ff       	sbrs	r29, 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <_Z19processReceivedDatah+0xc8>
				crc ^= 0x8C;
 160:	9c 2f       	mov	r25, r28
 162:	94 27       	eor	r25, r20
			}
			extract >>= 1;
 164:	76 95       	lsr	r23
 166:	61 50       	subi	r22, 0x01	; 1

static unsigned char CRC8(const unsigned char* data, unsigned short len) {
	unsigned char crc = 0x00;
	while (len--) {
		unsigned char extract = *data++;
		for (unsigned char tempI = 8; tempI; tempI--) {
 168:	91 f7       	brne	.-28     	; 0x14e <_Z19processReceivedDatah+0xb2>
 16a:	ec cf       	rjmp	.-40     	; 0x144 <_Z19processReceivedDatah+0xa8>
 16c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
		
		if(crc == data){
 170:	89 13       	cpse	r24, r25
 172:	05 c0       	rjmp	.+10     	; 0x17e <_Z19processReceivedDatah+0xe2>
			
			currentBuffer = !currentBuffer;
 174:	30 93 fd 02 	sts	0x02FD, r19	; 0x8002fd <currentBuffer>
			
			dataUpdated = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <dataUpdated>
			
		}

	}
	
	ser_data_pos++;
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ser_data_pos>
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <__vector_18>:

uint8_t index = 0;

ISR(USART_RX_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	unsigned char c = UDR0;
 1ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	
	//serialWrite(c);
	
	processReceivedData(c);
 1b0:	75 df       	rcall	.-278    	; 0x9c <_Z19processReceivedDatah>
}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <main>:

int main(void)
{
	serialBegin(115200);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	72 ec       	ldi	r23, 0xC2	; 194
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	3c df       	rcall	.-392    	; 0x56 <_Z11serialBeginl>

	sei();
 1de:	78 94       	sei
	do{

		cli();
		if(dataUpdated == 1){

			ws2812_setleds_array((uint8_t*)&bufferedData[currentBuffer], 84);
 1e0:	2d ef       	ldi	r18, 0xFD	; 253

	sei();
	
	do{

		cli();
 1e2:	f8 94       	cli
		if(dataUpdated == 1){
 1e4:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <dataUpdated>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	09 f0       	breq	.+2      	; 0x1ee <main+0x1a>
 1ec:	31 c0       	rjmp	.+98     	; 0x250 <loop372+0x36>

			ws2812_setleds_array((uint8_t*)&bufferedData[currentBuffer], 84);
 1ee:	e0 91 fd 02 	lds	r30, 0x02FD	; 0x8002fd <currentBuffer>
 1f2:	2e 9f       	mul	r18, r30
 1f4:	f0 01       	movw	r30, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	ed 5f       	subi	r30, 0xFD	; 253
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
	uint8_t curbyte,ctr,masklo;
	uint8_t sreg_prev;
	
	ws2812_DDRREG |= maskhi; // Enable output
 1fc:	20 9a       	sbi	0x04, 0	; 4
	
	masklo	=~maskhi&ws2812_PORTREG;
 1fe:	95 b1       	in	r25, 0x05	; 5
 200:	9e 7f       	andi	r25, 0xFE	; 254
	maskhi |=        ws2812_PORTREG;
 202:	85 b1       	in	r24, 0x05	; 5
 204:	81 60       	ori	r24, 0x01	; 1
	
	sreg_prev=SREG;
 206:	3f b7       	in	r19, 0x3f	; 63
	cli();
 208:	f8 94       	cli
 20a:	bf 01       	movw	r22, r30
 20c:	64 50       	subi	r22, 0x04	; 4
 20e:	7f 4f       	sbci	r23, 0xFF	; 255

	while (datlen--) {
 210:	e6 17       	cp	r30, r22
 212:	f7 07       	cpc	r31, r23
 214:	a1 f0       	breq	.+40     	; 0x23e <loop372+0x24>
		curbyte=*data++;
 216:	41 91       	ld	r20, Z+

		"       dec   %0    \n\t"    //  '1' [+2] '0' [+2]
		"       brne  loop%=\n\t"    //  '1' [+3] '0' [+4]
		:	"=&d" (ctr)
		:	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
		);
 218:	58 e0       	ldi	r21, 0x08	; 8

0000021a <loop372>:
 21a:	85 b9       	out	0x05, r24	; 5
 21c:	00 00       	nop
 21e:	00 c0       	rjmp	.+0      	; 0x220 <loop372+0x6>
 220:	00 c0       	rjmp	.+0      	; 0x222 <loop372+0x8>
 222:	47 ff       	sbrs	r20, 7
 224:	95 b9       	out	0x05, r25	; 5
 226:	44 0f       	add	r20, r20
 228:	00 00       	nop
 22a:	00 c0       	rjmp	.+0      	; 0x22c <loop372+0x12>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <loop372+0x14>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <loop372+0x16>
 230:	00 c0       	rjmp	.+0      	; 0x232 <loop372+0x18>
 232:	95 b9       	out	0x05, r25	; 5
 234:	00 00       	nop
 236:	00 c0       	rjmp	.+0      	; 0x238 <loop372+0x1e>
 238:	5a 95       	dec	r21
 23a:	79 f7       	brne	.-34     	; 0x21a <loop372>
 23c:	e9 cf       	rjmp	.-46     	; 0x210 <main+0x3c>
	}
	
	SREG=sreg_prev;
 23e:	3f bf       	out	0x3f, r19	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	89 ef       	ldi	r24, 0xF9	; 249
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <loop372+0x2a>
 248:	00 c0       	rjmp	.+0      	; 0x24a <loop372+0x30>
 24a:	00 00       	nop
			
			dataUpdated = 0;
 24c:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <dataUpdated>
		}
		sei();
 250:	78 94       	sei
{
	serialBegin(115200);

	sei();
	
	do{
 252:	c7 cf       	rjmp	.-114    	; 0x1e2 <main+0xe>

00000254 <__divmodsi4>:
 254:	05 2e       	mov	r0, r21
 256:	97 fb       	bst	r25, 7
 258:	16 f4       	brtc	.+4      	; 0x25e <__divmodsi4+0xa>
 25a:	00 94       	com	r0
 25c:	0f d0       	rcall	.+30     	; 0x27c <__negsi2>
 25e:	57 fd       	sbrc	r21, 7
 260:	05 d0       	rcall	.+10     	; 0x26c <__divmodsi4_neg2>
 262:	14 d0       	rcall	.+40     	; 0x28c <__udivmodsi4>
 264:	07 fc       	sbrc	r0, 7
 266:	02 d0       	rcall	.+4      	; 0x26c <__divmodsi4_neg2>
 268:	46 f4       	brtc	.+16     	; 0x27a <__divmodsi4_exit>
 26a:	08 c0       	rjmp	.+16     	; 0x27c <__negsi2>

0000026c <__divmodsi4_neg2>:
 26c:	50 95       	com	r21
 26e:	40 95       	com	r20
 270:	30 95       	com	r19
 272:	21 95       	neg	r18
 274:	3f 4f       	sbci	r19, 0xFF	; 255
 276:	4f 4f       	sbci	r20, 0xFF	; 255
 278:	5f 4f       	sbci	r21, 0xFF	; 255

0000027a <__divmodsi4_exit>:
 27a:	08 95       	ret

0000027c <__negsi2>:
 27c:	90 95       	com	r25
 27e:	80 95       	com	r24
 280:	70 95       	com	r23
 282:	61 95       	neg	r22
 284:	7f 4f       	sbci	r23, 0xFF	; 255
 286:	8f 4f       	sbci	r24, 0xFF	; 255
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	08 95       	ret

0000028c <__udivmodsi4>:
 28c:	a1 e2       	ldi	r26, 0x21	; 33
 28e:	1a 2e       	mov	r1, r26
 290:	aa 1b       	sub	r26, r26
 292:	bb 1b       	sub	r27, r27
 294:	fd 01       	movw	r30, r26
 296:	0d c0       	rjmp	.+26     	; 0x2b2 <__udivmodsi4_ep>

00000298 <__udivmodsi4_loop>:
 298:	aa 1f       	adc	r26, r26
 29a:	bb 1f       	adc	r27, r27
 29c:	ee 1f       	adc	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	a2 17       	cp	r26, r18
 2a2:	b3 07       	cpc	r27, r19
 2a4:	e4 07       	cpc	r30, r20
 2a6:	f5 07       	cpc	r31, r21
 2a8:	20 f0       	brcs	.+8      	; 0x2b2 <__udivmodsi4_ep>
 2aa:	a2 1b       	sub	r26, r18
 2ac:	b3 0b       	sbc	r27, r19
 2ae:	e4 0b       	sbc	r30, r20
 2b0:	f5 0b       	sbc	r31, r21

000002b2 <__udivmodsi4_ep>:
 2b2:	66 1f       	adc	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	88 1f       	adc	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	1a 94       	dec	r1
 2bc:	69 f7       	brne	.-38     	; 0x298 <__udivmodsi4_loop>
 2be:	60 95       	com	r22
 2c0:	70 95       	com	r23
 2c2:	80 95       	com	r24
 2c4:	90 95       	com	r25
 2c6:	9b 01       	movw	r18, r22
 2c8:	ac 01       	movw	r20, r24
 2ca:	bd 01       	movw	r22, r26
 2cc:	cf 01       	movw	r24, r30
 2ce:	08 95       	ret

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
